// Generated by gencpp from file master_package/master_ros.msg
// DO NOT EDIT!


#ifndef MASTER_PACKAGE_MESSAGE_MASTER_ROS_H
#define MASTER_PACKAGE_MESSAGE_MASTER_ROS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_package
{
template <class ContainerAllocator>
struct master_ros_
{
  typedef master_ros_<ContainerAllocator> Type;

  master_ros_()
    : ros_movement()
    , ros_servo_kamera(0)
    , ros_speed_maju(0)
    , ros_speed_mundur(0)
    , ros_speed_kiri(0)
    , ros_speed_kanan(0)
    , servo_kamera(0)
    , ros_servo_gripper(0)  {
    }
  master_ros_(const ContainerAllocator& _alloc)
    : ros_movement(_alloc)
    , ros_servo_kamera(0)
    , ros_speed_maju(0)
    , ros_speed_mundur(0)
    , ros_speed_kiri(0)
    , ros_speed_kanan(0)
    , servo_kamera(0)
    , ros_servo_gripper(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ros_movement_type;
  _ros_movement_type ros_movement;

   typedef int16_t _ros_servo_kamera_type;
  _ros_servo_kamera_type ros_servo_kamera;

   typedef int64_t _ros_speed_maju_type;
  _ros_speed_maju_type ros_speed_maju;

   typedef int64_t _ros_speed_mundur_type;
  _ros_speed_mundur_type ros_speed_mundur;

   typedef int64_t _ros_speed_kiri_type;
  _ros_speed_kiri_type ros_speed_kiri;

   typedef int64_t _ros_speed_kanan_type;
  _ros_speed_kanan_type ros_speed_kanan;

   typedef int64_t _servo_kamera_type;
  _servo_kamera_type servo_kamera;

   typedef int64_t _ros_servo_gripper_type;
  _ros_servo_gripper_type ros_servo_gripper;





  typedef boost::shared_ptr< ::master_package::master_ros_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_package::master_ros_<ContainerAllocator> const> ConstPtr;

}; // struct master_ros_

typedef ::master_package::master_ros_<std::allocator<void> > master_ros;

typedef boost::shared_ptr< ::master_package::master_ros > master_rosPtr;
typedef boost::shared_ptr< ::master_package::master_ros const> master_rosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_package::master_ros_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_package::master_ros_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_package::master_ros_<ContainerAllocator1> & lhs, const ::master_package::master_ros_<ContainerAllocator2> & rhs)
{
  return lhs.ros_movement == rhs.ros_movement &&
    lhs.ros_servo_kamera == rhs.ros_servo_kamera &&
    lhs.ros_speed_maju == rhs.ros_speed_maju &&
    lhs.ros_speed_mundur == rhs.ros_speed_mundur &&
    lhs.ros_speed_kiri == rhs.ros_speed_kiri &&
    lhs.ros_speed_kanan == rhs.ros_speed_kanan &&
    lhs.servo_kamera == rhs.servo_kamera &&
    lhs.ros_servo_gripper == rhs.ros_servo_gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_package::master_ros_<ContainerAllocator1> & lhs, const ::master_package::master_ros_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::master_package::master_ros_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_package::master_ros_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_package::master_ros_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_package::master_ros_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_package::master_ros_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_package::master_ros_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_package::master_ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da1819055561b8d77300168d2e0c6289";
  }

  static const char* value(const ::master_package::master_ros_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda1819055561b8d7ULL;
  static const uint64_t static_value2 = 0x7300168d2e0c6289ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_package::master_ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_package/master_ros";
  }

  static const char* value(const ::master_package::master_ros_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_package::master_ros_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ros_movement\n"
"int16 ros_servo_kamera\n"
"int64 ros_speed_maju\n"
"int64 ros_speed_mundur\n"
"int64 ros_speed_kiri\n"
"int64 ros_speed_kanan\n"
"int64 servo_kamera\n"
"int64 ros_servo_gripper\n"
;
  }

  static const char* value(const ::master_package::master_ros_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_package::master_ros_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ros_movement);
      stream.next(m.ros_servo_kamera);
      stream.next(m.ros_speed_maju);
      stream.next(m.ros_speed_mundur);
      stream.next(m.ros_speed_kiri);
      stream.next(m.ros_speed_kanan);
      stream.next(m.servo_kamera);
      stream.next(m.ros_servo_gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct master_ros_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_package::master_ros_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_package::master_ros_<ContainerAllocator>& v)
  {
    s << indent << "ros_movement: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ros_movement);
    s << indent << "ros_servo_kamera: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ros_servo_kamera);
    s << indent << "ros_speed_maju: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_speed_maju);
    s << indent << "ros_speed_mundur: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_speed_mundur);
    s << indent << "ros_speed_kiri: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_speed_kiri);
    s << indent << "ros_speed_kanan: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_speed_kanan);
    s << indent << "servo_kamera: ";
    Printer<int64_t>::stream(s, indent + "  ", v.servo_kamera);
    s << indent << "ros_servo_gripper: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ros_servo_gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_PACKAGE_MESSAGE_MASTER_ROS_H

// Generated by gencpp from file master_package/master_stm32.msg
// DO NOT EDIT!


#ifndef MASTER_PACKAGE_MESSAGE_MASTER_STM32_H
#define MASTER_PACKAGE_MESSAGE_MASTER_STM32_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_package
{
template <class ContainerAllocator>
struct master_stm32_
{
  typedef master_stm32_<ContainerAllocator> Type;

  master_stm32_()
    : stm32_movement()
    , stm32_heading(0)
    , stm32_depth(0)  {
    }
  master_stm32_(const ContainerAllocator& _alloc)
    : stm32_movement(_alloc)
    , stm32_heading(0)
    , stm32_depth(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stm32_movement_type;
  _stm32_movement_type stm32_movement;

   typedef int64_t _stm32_heading_type;
  _stm32_heading_type stm32_heading;

   typedef int64_t _stm32_depth_type;
  _stm32_depth_type stm32_depth;





  typedef boost::shared_ptr< ::master_package::master_stm32_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_package::master_stm32_<ContainerAllocator> const> ConstPtr;

}; // struct master_stm32_

typedef ::master_package::master_stm32_<std::allocator<void> > master_stm32;

typedef boost::shared_ptr< ::master_package::master_stm32 > master_stm32Ptr;
typedef boost::shared_ptr< ::master_package::master_stm32 const> master_stm32ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_package::master_stm32_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_package::master_stm32_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_package::master_stm32_<ContainerAllocator1> & lhs, const ::master_package::master_stm32_<ContainerAllocator2> & rhs)
{
  return lhs.stm32_movement == rhs.stm32_movement &&
    lhs.stm32_heading == rhs.stm32_heading &&
    lhs.stm32_depth == rhs.stm32_depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_package::master_stm32_<ContainerAllocator1> & lhs, const ::master_package::master_stm32_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::master_package::master_stm32_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_package::master_stm32_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_package::master_stm32_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_package::master_stm32_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_package::master_stm32_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_package::master_stm32_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_package::master_stm32_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee71efa32a1481ff27ebaa2bab653120";
  }

  static const char* value(const ::master_package::master_stm32_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee71efa32a1481ffULL;
  static const uint64_t static_value2 = 0x27ebaa2bab653120ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_package::master_stm32_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_package/master_stm32";
  }

  static const char* value(const ::master_package::master_stm32_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_package::master_stm32_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string stm32_movement\n"
"int64 stm32_heading\n"
"int64 stm32_depth\n"
;
  }

  static const char* value(const ::master_package::master_stm32_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_package::master_stm32_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stm32_movement);
      stream.next(m.stm32_heading);
      stream.next(m.stm32_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct master_stm32_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_package::master_stm32_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_package::master_stm32_<ContainerAllocator>& v)
  {
    s << indent << "stm32_movement: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stm32_movement);
    s << indent << "stm32_heading: ";
    Printer<int64_t>::stream(s, indent + "  ", v.stm32_heading);
    s << indent << "stm32_depth: ";
    Printer<int64_t>::stream(s, indent + "  ", v.stm32_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_PACKAGE_MESSAGE_MASTER_STM32_H

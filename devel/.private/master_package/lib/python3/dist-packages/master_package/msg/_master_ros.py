# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_package/master_ros.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class master_ros(genpy.Message):
  _md5sum = "da1819055561b8d77300168d2e0c6289"
  _type = "master_package/master_ros"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string ros_movement
int16 ros_servo_kamera
int64 ros_speed_maju
int64 ros_speed_mundur
int64 ros_speed_kiri
int64 ros_speed_kanan
int64 servo_kamera
int64 ros_servo_gripper"""
  __slots__ = ['ros_movement','ros_servo_kamera','ros_speed_maju','ros_speed_mundur','ros_speed_kiri','ros_speed_kanan','servo_kamera','ros_servo_gripper']
  _slot_types = ['string','int16','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ros_movement,ros_servo_kamera,ros_speed_maju,ros_speed_mundur,ros_speed_kiri,ros_speed_kanan,servo_kamera,ros_servo_gripper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(master_ros, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ros_movement is None:
        self.ros_movement = ''
      if self.ros_servo_kamera is None:
        self.ros_servo_kamera = 0
      if self.ros_speed_maju is None:
        self.ros_speed_maju = 0
      if self.ros_speed_mundur is None:
        self.ros_speed_mundur = 0
      if self.ros_speed_kiri is None:
        self.ros_speed_kiri = 0
      if self.ros_speed_kanan is None:
        self.ros_speed_kanan = 0
      if self.servo_kamera is None:
        self.servo_kamera = 0
      if self.ros_servo_gripper is None:
        self.ros_servo_gripper = 0
    else:
      self.ros_movement = ''
      self.ros_servo_kamera = 0
      self.ros_speed_maju = 0
      self.ros_speed_mundur = 0
      self.ros_speed_kiri = 0
      self.ros_speed_kanan = 0
      self.servo_kamera = 0
      self.ros_servo_gripper = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ros_movement
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h6q().pack(_x.ros_servo_kamera, _x.ros_speed_maju, _x.ros_speed_mundur, _x.ros_speed_kiri, _x.ros_speed_kanan, _x.servo_kamera, _x.ros_servo_gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ros_movement = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ros_movement = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.ros_servo_kamera, _x.ros_speed_maju, _x.ros_speed_mundur, _x.ros_speed_kiri, _x.ros_speed_kanan, _x.servo_kamera, _x.ros_servo_gripper,) = _get_struct_h6q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ros_movement
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_h6q().pack(_x.ros_servo_kamera, _x.ros_speed_maju, _x.ros_speed_mundur, _x.ros_speed_kiri, _x.ros_speed_kanan, _x.servo_kamera, _x.ros_servo_gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ros_movement = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ros_movement = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.ros_servo_kamera, _x.ros_speed_maju, _x.ros_speed_mundur, _x.ros_speed_kiri, _x.ros_speed_kanan, _x.servo_kamera, _x.ros_servo_gripper,) = _get_struct_h6q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h6q = None
def _get_struct_h6q():
    global _struct_h6q
    if _struct_h6q is None:
        _struct_h6q = struct.Struct("<h6q")
    return _struct_h6q

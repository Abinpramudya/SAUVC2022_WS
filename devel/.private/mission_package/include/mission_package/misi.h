// Generated by gencpp from file mission_package/misi.msg
// DO NOT EDIT!


#ifndef MISSION_PACKAGE_MESSAGE_MISI_H
#define MISSION_PACKAGE_MESSAGE_MISI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mission_package
{
template <class ContainerAllocator>
struct misi_
{
  typedef misi_<ContainerAllocator> Type;

  misi_()
    : misi(0)
    , submisi(0)  {
    }
  misi_(const ContainerAllocator& _alloc)
    : misi(0)
    , submisi(0)  {
  (void)_alloc;
    }



   typedef int64_t _misi_type;
  _misi_type misi;

   typedef int64_t _submisi_type;
  _submisi_type submisi;





  typedef boost::shared_ptr< ::mission_package::misi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mission_package::misi_<ContainerAllocator> const> ConstPtr;

}; // struct misi_

typedef ::mission_package::misi_<std::allocator<void> > misi;

typedef boost::shared_ptr< ::mission_package::misi > misiPtr;
typedef boost::shared_ptr< ::mission_package::misi const> misiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mission_package::misi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mission_package::misi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mission_package::misi_<ContainerAllocator1> & lhs, const ::mission_package::misi_<ContainerAllocator2> & rhs)
{
  return lhs.misi == rhs.misi &&
    lhs.submisi == rhs.submisi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mission_package::misi_<ContainerAllocator1> & lhs, const ::mission_package::misi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mission_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mission_package::misi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mission_package::misi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_package::misi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_package::misi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_package::misi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_package::misi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mission_package::misi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8bcd0b04052275aff2eac8c31be06a0";
  }

  static const char* value(const ::mission_package::misi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8bcd0b04052275aULL;
  static const uint64_t static_value2 = 0xff2eac8c31be06a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mission_package::misi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mission_package/misi";
  }

  static const char* value(const ::mission_package::misi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mission_package::misi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 misi\n"
"int64 submisi\n"
;
  }

  static const char* value(const ::mission_package::misi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mission_package::misi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.misi);
      stream.next(m.submisi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct misi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mission_package::misi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mission_package::misi_<ContainerAllocator>& v)
  {
    s << indent << "misi: ";
    Printer<int64_t>::stream(s, indent + "  ", v.misi);
    s << indent << "submisi: ";
    Printer<int64_t>::stream(s, indent + "  ", v.submisi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MISSION_PACKAGE_MESSAGE_MISI_H

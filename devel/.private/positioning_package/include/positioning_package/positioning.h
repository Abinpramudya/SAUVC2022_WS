// Generated by gencpp from file positioning_package/positioning.msg
// DO NOT EDIT!


#ifndef POSITIONING_PACKAGE_MESSAGE_POSITIONING_H
#define POSITIONING_PACKAGE_MESSAGE_POSITIONING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace positioning_package
{
template <class ContainerAllocator>
struct positioning_
{
  typedef positioning_<ContainerAllocator> Type;

  positioning_()
    : posisi_x(0.0)
    , posisi_z(0.0)  {
    }
  positioning_(const ContainerAllocator& _alloc)
    : posisi_x(0.0)
    , posisi_z(0.0)  {
  (void)_alloc;
    }



   typedef double _posisi_x_type;
  _posisi_x_type posisi_x;

   typedef double _posisi_z_type;
  _posisi_z_type posisi_z;





  typedef boost::shared_ptr< ::positioning_package::positioning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::positioning_package::positioning_<ContainerAllocator> const> ConstPtr;

}; // struct positioning_

typedef ::positioning_package::positioning_<std::allocator<void> > positioning;

typedef boost::shared_ptr< ::positioning_package::positioning > positioningPtr;
typedef boost::shared_ptr< ::positioning_package::positioning const> positioningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::positioning_package::positioning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::positioning_package::positioning_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::positioning_package::positioning_<ContainerAllocator1> & lhs, const ::positioning_package::positioning_<ContainerAllocator2> & rhs)
{
  return lhs.posisi_x == rhs.posisi_x &&
    lhs.posisi_z == rhs.posisi_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::positioning_package::positioning_<ContainerAllocator1> & lhs, const ::positioning_package::positioning_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace positioning_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::positioning_package::positioning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::positioning_package::positioning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::positioning_package::positioning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::positioning_package::positioning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::positioning_package::positioning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::positioning_package::positioning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::positioning_package::positioning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9577dd741c8df9c418dcd1145425041";
  }

  static const char* value(const ::positioning_package::positioning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9577dd741c8df9cULL;
  static const uint64_t static_value2 = 0x418dcd1145425041ULL;
};

template<class ContainerAllocator>
struct DataType< ::positioning_package::positioning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "positioning_package/positioning";
  }

  static const char* value(const ::positioning_package::positioning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::positioning_package::positioning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 posisi_x\n"
"float64 posisi_z\n"
;
  }

  static const char* value(const ::positioning_package::positioning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::positioning_package::positioning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posisi_x);
      stream.next(m.posisi_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct positioning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::positioning_package::positioning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::positioning_package::positioning_<ContainerAllocator>& v)
  {
    s << indent << "posisi_x: ";
    Printer<double>::stream(s, indent + "  ", v.posisi_x);
    s << indent << "posisi_z: ";
    Printer<double>::stream(s, indent + "  ", v.posisi_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSITIONING_PACKAGE_MESSAGE_POSITIONING_H
